{"version":3,"sources":["utils/API.js","components/DataTb.js","components/Search.js","components/JumboHeader.js","App.js","serviceWorker.js","index.js"],"names":["getEmployees","axios","get","DataTb","employees","searchTerm","sortHandler","className","scope","onClick","filter","employee","name","last","toLowerCase","startsWith","first","map","person","id","key","src","picture","thumbnail","moment","dob","date","format","email","cell","Search","handleInputChange","onChange","value","aria-label","type","placeholder","JumboHeader","App","event","setState","target","state","sorted","bind","then","res","data","results","item","sortedNames","this","sort","a","b","localeCompare","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a80e1773.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst getEmployees = axios.get(\"https://randomuser.me/api/?results=60&nat=us\");\n\nexport default getEmployees; ","import React from 'react';\nimport moment from \"moment\";\nimport \"../styles/data-tb.css\";\n\n\nfunction DataTb({employees, searchTerm, sortHandler}) {\n    return (\n        <table className=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">Image</th>\n                    <th scope=\"col\" onClick={() => { sortHandler(\"first\") }}>Name</th>\n                    <th scope=\"col\">Date of Birth</th>\n                    <th scope=\"col\">Email</th>\n                    <th scope=\"col\">Phone Number</th>\n                </tr>\n            </thead>\n            <tbody>\n                {employees.filter(employee => employee.name.last.toLowerCase().startsWith(searchTerm.toLowerCase()) || employee.name.first.toLowerCase().startsWith(searchTerm.toLowerCase())).map((person, id) =>\n                    <tr key={id}>\n                        <td><center><img src={person.picture.thumbnail}></img></center></td>\n                        <td>{person.name.first} {person.name.last}</td>\n                        <td>{moment(person.dob.date).format(\"L\")}</td>\n                        <td>{person.email}</td>\n                        <td>{person.cell}</td>\n                    </tr>\n                )}\n            </tbody>\n        </table>\n    );\n};\n\nexport default DataTb;","import React from 'react';\nimport \"../styles/search.css\";\n\nfunction Search({searchTerm, handleInputChange}) {\n    return (\n        <div className=\"search\">\n            <input \n            onChange={handleInputChange}\n            value={searchTerm}\n            name=\"search\"\n            aria-label=\"Search\"\n            type=\"text\"\n            placeholder=\"Search\"\n            \n            />\n        </div>\n\n        \n    );\n};\n\nexport default Search;","import React from 'react';\nimport \"../styles/jumbo-header.css\";\n\nfunction JumboHeader () {\n    return (\n        <div className=\"header\">\n            <div className=\"jumbotron jumbotron-fluid\" id=\"jumbo\">\n                <div className=\"container\">\n                    <h1 className=\"header\">Employee Directory</h1>\n                    <p className=\"lead\">Use the search box to narrow your results.</p>\n                </div>\n            </div>\n            \n        </div>\n    );\n};\n\nexport default JumboHeader;","import React from 'react';\nimport getEmployees from \"./utils/API.js\"\nimport DataTb from \"./components/DataTb\";\nimport Search from \"./components/Search\";\nimport JumboHeader from \"./components/JumboHeader\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      employees: [],\n      searchTerm: \"\",\n      sorted: false\n    };\n    this.sortHandler = this.sortHandler.bind(this)\n  };\n    \n    componentDidMount() {\n    getEmployees\n      .then((res) => {\n        this.setState({ employees: res.data.results });\n      });\n  };\n\n  handleInputChange = event => {\n    this.setState({\n      searchTerm: event.target.value\n    });\n  };\n\n  sortHandler(item) {\n    let sortedNames;\n    if (!this.state.sorted) {\n      sortedNames = this.state.employees.sort((a, b) => { return b.name[item].localeCompare(a.name[item]) });\n      this.setState({ employees: sortedNames, sorted: true });\n    }\n    else {\n      sortedNames = this.state.employees.sort((a, b) => { return a.name[item].localeCompare(b.name[item]) });\n      this.setState({ employees: sortedNames, sorted: false });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <JumboHeader />\n        <div className=\"container-fluid\" id=\"contain\">\n        <Search\n          searchTerm={this.state.searchTerm}\n          handleInputChange={this.handleInputChange}\n        />\n        <br />\n        <DataTb\n          employees={this.state.employees}\n          sortHandler={this.sortHandler}\n          searchTerm={this.state.searchTerm}\n        />\n        </div>\n      </div>\n    )\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}